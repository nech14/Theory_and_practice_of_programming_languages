// Generated by Haxe 4.3.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["massive"] = $hx_exports["massive"] || {};
$hx_exports["massive"]["munit"] = $hx_exports["massive"]["munit"] || {};
$hx_exports["massive"]["munit"]["util"] = $hx_exports["massive"]["munit"]["util"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var ExampleTest = function() {
};
ExampleTest.__name__ = "ExampleTest";
ExampleTest.prototype = {
	beforeClass: function() {
	}
	,afterClass: function() {
	}
	,setup: function() {
	}
	,tearDown: function() {
	}
	,testExample: function() {
		massive_munit_Assert.isTrue(true,null,{ fileName : "test/ExampleTest.hx", lineNumber : 41, className : "ExampleTest", methodName : "testExample"});
	}
	,testAsyncExample: function(factory) {
		var handler = factory.createHandler(this,$bind(this,this.onTestAsyncExampleComplete),300,{ fileName : "test/ExampleTest.hx", lineNumber : 47, className : "ExampleTest", methodName : "testAsyncExample"});
		var timer = massive_munit_util_Timer.delay(handler,200);
	}
	,onTestAsyncExampleComplete: function() {
		massive_munit_Assert.isFalse(false,null,{ fileName : "test/ExampleTest.hx", lineNumber : 53, className : "ExampleTest", methodName : "onTestAsyncExampleComplete"});
	}
	,testExampleThatOnlyRunsWithDebugFlag: function() {
		massive_munit_Assert.isTrue(true,null,{ fileName : "test/ExampleTest.hx", lineNumber : 62, className : "ExampleTest", methodName : "testExampleThatOnlyRunsWithDebugFlag"});
	}
	,__class__: ExampleTest
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var InfixTest = function() {
};
InfixTest.__name__ = "InfixTest";
InfixTest.prototype = {
	beforeClass: function() {
	}
	,afterClass: function() {
	}
	,setup: function() {
	}
	,tearDown: function() {
	}
	,testPrefixToInfix0: function() {
		var infix = new src_Infix();
		var str = "+ - 13 4 55";
		massive_munit_Assert.areEqual("13-4+55",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 42, className : "InfixTest", methodName : "testPrefixToInfix0"});
	}
	,testPrefixToInfix1: function() {
		var infix = new src_Infix();
		var str = "+ 2 * 2 - 2 1";
		massive_munit_Assert.areEqual("2+2*(2-1)",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 49, className : "InfixTest", methodName : "testPrefixToInfix1"});
	}
	,testPrefixToInfix2: function() {
		var infix = new src_Infix();
		var str = "+ + 10 20 30";
		massive_munit_Assert.areEqual("10+20+30",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 56, className : "InfixTest", methodName : "testPrefixToInfix2"});
	}
	,testPrefixToInfix3: function() {
		var infix = new src_Infix();
		var str = "- - 1 2";
		massive_munit_Assert.areEqual("-(1-2)",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 63, className : "InfixTest", methodName : "testPrefixToInfix3"});
	}
	,testPrefixToInfix4: function() {
		var infix = new src_Infix();
		var str = "/ + 3 10 * + 2 3 - 3 5";
		massive_munit_Assert.areEqual("(3+10)/((2+3)*(3-5))",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 70, className : "InfixTest", methodName : "testPrefixToInfix4"});
	}
	,testPrefixToInfix5: function() {
		var infix = new src_Infix();
		var str = "/ - 3 10 * + 2 3 + 3 5 ";
		massive_munit_Assert.areEqual("(3-10)/((2+3)*(3+5))",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 77, className : "InfixTest", methodName : "testPrefixToInfix5"});
	}
	,testPrefixToInfix6: function() {
		var infix = new src_Infix();
		var str = "* 3 * 3 5 ";
		massive_munit_Assert.areEqual("3*3*5",infix.start(str),null,{ fileName : "test/InfixTest.hx", lineNumber : 84, className : "InfixTest", methodName : "testPrefixToInfix6"});
	}
	,__class__: InfixTest
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var TestMain = function() {
	var suites = [];
	suites.push(TestSuite);
	var client = new massive_munit_client_RichPrintClient();
	var httpClient = new massive_munit_client_HTTPClient(new massive_munit_client_SummaryReportClient());
	var runner = new massive_munit_TestRunner(client);
	runner.addResultClient(httpClient);
	runner.completionHandler = $bind(this,this.completionHandler);
	var seconds = 0;
	var delayStartup = null;
	delayStartup = function() {
		if(seconds > 0) {
			seconds -= 1;
			var delayStartup1 = "Tests will start in " + seconds;
			window.document.getElementById("munit").innerHTML = delayStartup1 + "s...";
			haxe_Timer.delay(delayStartup,1000);
		} else {
			window.document.getElementById("munit").innerHTML = "";
			runner.run(suites);
		}
	};
	delayStartup();
};
TestMain.__name__ = "TestMain";
TestMain.main = function() {
	new TestMain();
};
TestMain.prototype = {
	completionHandler: function(successful) {
		try {
			eval("testResult(" + (successful == null ? "null" : "" + successful) + ");");
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	,__class__: TestMain
};
var massive_munit_TestSuite = function() {
	this.index = 0;
	this.tests = [];
};
massive_munit_TestSuite.__name__ = "massive.munit.TestSuite";
massive_munit_TestSuite.prototype = {
	tests: null
	,index: null
	,add: function(test) {
		this.tests.push(test);
		this.sortTests();
	}
	,hasNext: function() {
		return this.index < this.tests.length;
	}
	,next: function() {
		if(this.hasNext()) {
			return this.tests[this.index++];
		} else {
			return null;
		}
	}
	,repeat: function() {
		if(this.index > 0) {
			this.index--;
		}
	}
	,sortTests: function() {
		this.tests.sort($bind(this,this.sortByName));
	}
	,sortByName: function(x,y) {
		var xName = x.__name__;
		var yName = y.__name__;
		if(xName == yName) {
			return 0;
		}
		if(xName > yName) {
			return 1;
		}
		return -1;
	}
	,__class__: massive_munit_TestSuite
};
var TestSuite = function() {
	massive_munit_TestSuite.call(this);
	this.add(ExampleTest);
	this.add(InfixTest);
};
TestSuite.__name__ = "TestSuite";
TestSuite.__super__ = massive_munit_TestSuite;
TestSuite.prototype = $extend(massive_munit_TestSuite.prototype,{
	__class__: TestSuite
});
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,setHeader: function(name,value) {
		var _g = 0;
		var _g1 = this.headers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,responseHeaders: null
	,req: null
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var headers = r.getAllResponseHeaders().split("\r\n");
				var _g = [];
				var _g1 = 0;
				var _g2 = headers;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				var onreadystatechange = new haxe_ds_StringMap();
				_gthis.responseHeaders = onreadystatechange;
				var _g = 0;
				while(_g < headers.length) {
					var hline = headers[_g];
					++_g;
					var a = hline.split(": ");
					var hname = a.shift();
					var hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = "js.Browser";
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var massive_haxe_Exception = function(message,info) {
	this.message = message;
	this.info = info;
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/haxe/Exception.hx", lineNumber : 70, className : "massive.haxe.Exception", methodName : "new"}).className;
};
massive_haxe_Exception.__name__ = "massive.haxe.Exception";
massive_haxe_Exception.prototype = {
	type: null
	,message: null
	,info: null
	,toString: function() {
		var str = this.type + ": " + this.message;
		if(this.info != null) {
			str += " at " + this.info.className + "#" + this.info.methodName + " (" + this.info.lineNumber + ")";
		}
		return str;
	}
	,__class__: massive_haxe_Exception
};
var massive_haxe_util_ReflectUtil = function() { };
massive_haxe_util_ReflectUtil.__name__ = "massive.haxe.util.ReflectUtil";
massive_haxe_util_ReflectUtil.here = function(info) {
	return info;
};
var massive_munit_Assert = function() { };
massive_munit_Assert.__name__ = "massive.munit.Assert";
massive_munit_Assert.isTrue = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(value) {
		return;
	}
	if(message == null) {
		message = "Expected TRUE but was [" + (value == null ? "null" : "" + value) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isFalse = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!value) {
		return;
	}
	if(message == null) {
		message = "Expected FALSE but was [" + (value == null ? "null" : "" + value) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNull = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(value == null) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was not NULL";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotNull = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(value != null) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was NULL";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNaN = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(isNaN(value)) {
		return;
	}
	if(message == null) {
		message = "Value [" + value + "]  was not NaN";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotNaN = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!isNaN(value)) {
		return;
	}
	if(message == null) {
		message = "Value [" + value + "] was NaN";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isType = function(value,type,message,info) {
	massive_munit_Assert.assertionCount++;
	if(js_Boot.__instanceof(value,type)) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was not of type: " + type.__name__;
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotType = function(value,type,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!js_Boot.__instanceof(value,type)) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was of type: " + type.__name__;
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areEqual = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	if(massive_munit_Assert.equals(expected,actual)) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was not equal to expected value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areNotEqual = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!massive_munit_Assert.equals(expected,actual)) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was equal to value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areSame = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	if(expected == actual) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was not the same as expected value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areNotSame = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	if(expected != actual) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was the same as expected value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.doesMatch = function(string,regexp,message,info) {
	massive_munit_Assert.assertionCount++;
	if(regexp.match(string)) {
		return;
	}
	if(message == null) {
		message = "Value [" + string + "] was expected to match [" + Std.string(regexp) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.doesNotMatch = function(string,regexp,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!regexp.match(string)) {
		return;
	}
	if(message == null) {
		message = "Value [" + string + "] was expected to not match [" + Std.string(regexp) + "], and matched at [" + regexp.matchedPos().pos + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.throws = function(expectedType,code,info) {
	try {
		code();
		massive_munit_Assert.fail("Expected exception wasn't thrown!",info);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		if(js_Boot.__instanceof(e,expectedType)) {
			return e;
		}
		var tmp = "Expected exception of type " + expectedType.__name__ + " but got ";
		var c = js_Boot.getClass(e);
		massive_munit_Assert.fail(tmp + c.__name__ + ": " + Std.string(e),{ fileName : "massive/munit/Assert.hx", lineNumber : 294, className : "massive.munit.Assert", methodName : "throws"});
	}
	return null;
};
massive_munit_Assert.isEmpty = function(anObject,message,info) {
	var tmp;
	if(typeof(anObject) == "string") {
		tmp = anObject.length == 0;
	} else if(((anObject) instanceof Array)) {
		var a = anObject;
		tmp = a.length == 0;
	} else {
		tmp = !$getIterator(anObject).hasNext();
	}
	if(tmp) {
		return;
	}
	if(message == null) {
		message = "Value [" + anObject + "] was not EMPTY";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotEmpty = function(anObject,message,info) {
	var tmp;
	if(typeof(anObject) == "string") {
		tmp = anObject.length == 0;
	} else if(((anObject) instanceof Array)) {
		var a = anObject;
		tmp = a.length == 0;
	} else {
		tmp = !$getIterator(anObject).hasNext();
	}
	if(!tmp) {
		return;
	}
	if(message == null) {
		message = "Value [" + anObject + "] was EMPTY";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.fail = function(message,info) {
	throw haxe_Exception.thrown(new massive_munit_AssertionException(message,info));
};
massive_munit_Assert.equals = function(a,b) {
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 4:
		if(js_Boot.__instanceof(a,Class) && js_Boot.__instanceof(b,Class)) {
			var a1 = a.__name__;
			var b1 = b.__name__;
			return a1 == b1;
		}
		var afields = Reflect.fields(a);
		var bfields = Reflect.fields(b);
		if(afields.length == 0 && bfields.length == 0) {
			return true;
		}
		var _g1 = 0;
		while(_g1 < afields.length) {
			var it = afields[_g1];
			++_g1;
			HxOverrides.remove(bfields,it);
			if(!Object.prototype.hasOwnProperty.call(b,it)) {
				return false;
			}
			var av = Reflect.field(a,it);
			if(Reflect.isFunction(av)) {
				continue;
			}
			var bv = Reflect.field(b,it);
			if(!massive_munit_Assert.equals(av,bv)) {
				return false;
			}
		}
		return bfields.length == 0;
	case 5:
		return a == b;
	case 6:
		var _g1 = _g.c;
		if(a == b) {
			return true;
		}
		if(typeof(a) == "string" && typeof(b) == "string") {
			return false;
		}
		if(((a) instanceof Array) && ((b) instanceof Array)) {
			var a1 = a;
			var b1 = b;
			if(a1.length != b1.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = a1.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(!massive_munit_Assert.equals(a1[i],b1[i])) {
					return false;
				}
			}
			return true;
		}
		if(((a) instanceof haxe_io_Bytes) && ((b) instanceof haxe_io_Bytes)) {
			var a1 = js_Boot.__cast(a , haxe_io_Bytes);
			var b1 = js_Boot.__cast(b , haxe_io_Bytes);
			if(a1.length != b1.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = a1.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(a1.b[i] != b1.b[i]) {
					return false;
				}
			}
			return true;
		}
		if(js_Boot.__implements(a,haxe_IMap) && js_Boot.__implements(b,haxe_IMap)) {
			var a1 = a;
			var b1 = b;
			var _g1 = [];
			var it = a1.keys();
			while(it.hasNext()) {
				var it1 = it.next();
				_g1.push(it1);
			}
			var akeys = _g1;
			var _g1 = [];
			var it = b1.keys();
			while(it.hasNext()) {
				var it1 = it.next();
				_g1.push(it1);
			}
			var bkeys = _g1;
			if(akeys.length != bkeys.length) {
				return false;
			}
			var _g1 = 0;
			while(_g1 < akeys.length) {
				var it = akeys[_g1];
				++_g1;
				if(!massive_munit_Assert.equals(a1.get(it),b1.get(it))) {
					return false;
				}
			}
			return true;
		}
		if(((a) instanceof Date) && ((b) instanceof Date)) {
			var a1 = (js_Boot.__cast(a , Date)).getTime();
			var b1 = (js_Boot.__cast(b , Date)).getTime();
			return a1 == b1;
		}
		var afields = Type.getInstanceFields(js_Boot.getClass(a));
		var bfields = Type.getInstanceFields(js_Boot.getClass(b));
		if(afields.length != bfields.length) {
			return false;
		}
		var _g1 = 0;
		while(_g1 < afields.length) {
			var it = afields[_g1];
			++_g1;
			var av = Reflect.field(a,it);
			if(Reflect.isFunction(av)) {
				continue;
			}
			var bv = Reflect.field(b,it);
			if(!massive_munit_Assert.equals(av,bv)) {
				return false;
			}
		}
		return true;
	case 7:
		var _g1 = _g.e;
		return Type.enumEq(a,b);
	default:
		return ((a) === b);
	}
};
massive_munit_Assert.empty = function(anObject) {
	if(typeof(anObject) == "string") {
		return anObject.length == 0;
	} else if(((anObject) instanceof Array)) {
		var a = anObject;
		return a.length == 0;
	} else {
		return !$getIterator(anObject).hasNext();
	}
};
var massive_munit_MUnitException = function(message,info) {
	massive_haxe_Exception.call(this,message,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/MUnitException.hx", lineNumber : 52, className : "massive.munit.MUnitException", methodName : "new"}).className;
};
massive_munit_MUnitException.__name__ = "massive.munit.MUnitException";
massive_munit_MUnitException.__super__ = massive_haxe_Exception;
massive_munit_MUnitException.prototype = $extend(massive_haxe_Exception.prototype,{
	__class__: massive_munit_MUnitException
});
var massive_munit_AssertionException = function(msg,info) {
	massive_munit_MUnitException.call(this,msg,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/AssertionException.hx", lineNumber : 51, className : "massive.munit.AssertionException", methodName : "new"}).className;
};
massive_munit_AssertionException.__name__ = "massive.munit.AssertionException";
massive_munit_AssertionException.__super__ = massive_munit_MUnitException;
massive_munit_AssertionException.prototype = $extend(massive_munit_MUnitException.prototype,{
	__class__: massive_munit_AssertionException
});
var massive_munit_ITestResultClient = function() { };
massive_munit_ITestResultClient.__name__ = "massive.munit.ITestResultClient";
massive_munit_ITestResultClient.__isInterface__ = true;
massive_munit_ITestResultClient.prototype = {
	get_completionHandler: null
	,set_completionHandler: null
	,id: null
	,addPass: null
	,addFail: null
	,addError: null
	,addIgnore: null
	,reportFinalStatistics: null
	,__class__: massive_munit_ITestResultClient
};
var massive_munit_IAdvancedTestResultClient = function() { };
massive_munit_IAdvancedTestResultClient.__name__ = "massive.munit.IAdvancedTestResultClient";
massive_munit_IAdvancedTestResultClient.__isInterface__ = true;
massive_munit_IAdvancedTestResultClient.__interfaces__ = [massive_munit_ITestResultClient];
massive_munit_IAdvancedTestResultClient.prototype = {
	setCurrentTestClass: null
	,__class__: massive_munit_IAdvancedTestResultClient
};
var massive_munit_ICoverageTestResultClient = function() { };
massive_munit_ICoverageTestResultClient.__name__ = "massive.munit.ICoverageTestResultClient";
massive_munit_ICoverageTestResultClient.__isInterface__ = true;
massive_munit_ICoverageTestResultClient.__interfaces__ = [massive_munit_IAdvancedTestResultClient];
massive_munit_ICoverageTestResultClient.prototype = {
	setCurrentTestClassCoverage: null
	,reportFinalCoverage: null
	,__class__: massive_munit_ICoverageTestResultClient
};
var massive_munit_TestClassHelper = function(type,isDebug) {
	if(isDebug == null) {
		isDebug = false;
	}
	this.index = 0;
	this.tests = [];
	this.type = type;
	this.isDebug = isDebug;
	this.className = type.__name__;
	this.beforeClass = massive_munit_TestClassHelper.nullFunc;
	this.afterClass = massive_munit_TestClassHelper.nullFunc;
	this.before = massive_munit_TestClassHelper.nullFunc;
	this.after = massive_munit_TestClassHelper.nullFunc;
	this.parse(type);
};
massive_munit_TestClassHelper.__name__ = "massive.munit.TestClassHelper";
massive_munit_TestClassHelper.nullFunc = function() {
};
massive_munit_TestClassHelper.prototype = {
	type: null
	,test: null
	,beforeClass: null
	,afterClass: null
	,before: null
	,after: null
	,className: null
	,tests: null
	,index: null
	,isDebug: null
	,hasNext: function() {
		return this.index < this.tests.length;
	}
	,next: function() {
		if(this.hasNext()) {
			return this.tests[this.index++];
		} else {
			return null;
		}
	}
	,current: function() {
		if(this.index <= 0) {
			return this.tests[0];
		} else {
			return this.tests[this.index - 1];
		}
	}
	,parse: function(type) {
		this.test = Object.create(type.prototype);
		var inherintanceChain = this.getInheritanceChain(type);
		var fieldMeta = this.collateFieldMeta(inherintanceChain);
		this.scanForTests(fieldMeta);
		this.tests.sort($bind(this,this.sortTestsByName));
	}
	,getInheritanceChain: function(clazz) {
		var inherintanceChain = [clazz];
		while(true) {
			clazz = clazz.__super__;
			if(!(clazz != null)) {
				break;
			}
			inherintanceChain.push(clazz);
		}
		return inherintanceChain;
	}
	,collateFieldMeta: function(inherintanceChain) {
		var meta = { };
		var i = inherintanceChain.length;
		while(i-- > 0) {
			var clazz = inherintanceChain[i];
			var newMeta = haxe_rtti_Meta.getFields(clazz);
			var markedFieldNames = Reflect.fields(newMeta);
			var _g = 0;
			while(_g < markedFieldNames.length) {
				var fieldName = markedFieldNames[_g];
				++_g;
				var recordedFieldTags = Reflect.field(meta,fieldName);
				var newFieldTags = Reflect.field(newMeta,fieldName);
				var newTagNames = Reflect.fields(newFieldTags);
				if(recordedFieldTags == null) {
					var tagsCopy = { };
					var _g1 = 0;
					while(_g1 < newTagNames.length) {
						var tagName = newTagNames[_g1];
						++_g1;
						tagsCopy[tagName] = Reflect.field(newFieldTags,tagName);
					}
					meta[fieldName] = tagsCopy;
				} else {
					var ignored = false;
					var _g2 = 0;
					while(_g2 < newTagNames.length) {
						var tagName1 = newTagNames[_g2];
						++_g2;
						if(tagName1 == "Ignore") {
							ignored = true;
						}
						if(!ignored && (tagName1 == "Test" || tagName1 == "AsyncTest") && Object.prototype.hasOwnProperty.call(recordedFieldTags,"Ignore")) {
							Reflect.deleteField(recordedFieldTags,"Ignore");
						}
						var tagValue = Reflect.field(newFieldTags,tagName1);
						recordedFieldTags[tagName1] = tagValue;
					}
				}
			}
		}
		return meta;
	}
	,scanForTests: function(fieldMeta) {
		var fieldNames = Reflect.fields(fieldMeta);
		var _g = 0;
		while(_g < fieldNames.length) {
			var fieldName = fieldNames[_g];
			++_g;
			var f = Reflect.field(this.test,fieldName);
			if(!Reflect.isFunction(f)) {
				continue;
			}
			var funcMeta = Reflect.field(fieldMeta,fieldName);
			this.searchForMatchingTags(fieldName,f,funcMeta);
		}
	}
	,searchForMatchingTags: function(fieldName,func,funcMeta) {
		var _g = 0;
		var _g1 = massive_munit_TestClassHelper.META_TAGS;
		while(_g < _g1.length) {
			var tag = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(funcMeta,tag)) {
				continue;
			}
			var args = Reflect.field(funcMeta,tag);
			var description = args != null ? args[0] : "";
			var isAsync = args != null && description == "Async";
			var isIgnored = Object.prototype.hasOwnProperty.call(funcMeta,"Ignore");
			if(isAsync) {
				description = "";
			} else if(isIgnored) {
				args = Reflect.field(funcMeta,"Ignore");
				description = args != null ? args[0] : "";
			}
			switch(tag) {
			case "After":
				this.after = func;
				break;
			case "AfterClass":
				this.afterClass = func;
				break;
			case "AsyncTest":
				if(!this.isDebug) {
					this.addTest(fieldName,func,this.test,true,isIgnored,description);
				}
				break;
			case "Before":
				this.before = func;
				break;
			case "BeforeClass":
				this.beforeClass = func;
				break;
			case "Test":
				if(!this.isDebug) {
					this.addTest(fieldName,func,this.test,isAsync,isIgnored,description);
				}
				break;
			case "TestDebug":
				if(this.isDebug) {
					this.addTest(fieldName,func,this.test,isAsync,isIgnored,description);
				}
				break;
			}
		}
	}
	,addTest: function(field,testFunction,testInstance,isAsync,isIgnored,description) {
		var result = new massive_munit_TestResult();
		result.async = isAsync;
		result.ignore = isIgnored;
		result.className = this.className;
		result.description = description;
		result.name = field;
		this.tests.push({ scope : testInstance, test : testFunction, result : result});
	}
	,sortTestsByName: function(x,y) {
		var xName = x.result.name;
		var yName = y.result.name;
		if(xName == yName) {
			return 0;
		}
		if(xName > yName) {
			return 1;
		}
		return -1;
	}
	,__class__: massive_munit_TestClassHelper
};
var massive_munit_TestResult = function() {
	this.ignore = false;
	this.async = false;
	this.description = "";
	this.className = "";
	this.name = "";
	this.executionTime = 0.0;
	this.passed = false;
};
massive_munit_TestResult.__name__ = "massive.munit.TestResult";
massive_munit_TestResult.prototype = {
	passed: null
	,executionTime: null
	,name: null
	,className: null
	,description: null
	,location: null
	,get_location: function() {
		if(this.name == "" && this.className == "") {
			return "";
		} else {
			return this.className + "#" + this.name;
		}
	}
	,async: null
	,ignore: null
	,failure: null
	,error: null
	,type: null
	,get_type: function() {
		if(this.error != null) {
			return "ERROR";
		}
		if(this.failure != null) {
			return "FAIL";
		}
		if(this.ignore) {
			return "IGNORE";
		}
		if(this.passed) {
			return "PASS";
		}
		return "UNKNOWN";
	}
	,__class__: massive_munit_TestResult
};
var massive_munit_async_IAsyncDelegateObserver = function() { };
massive_munit_async_IAsyncDelegateObserver.__name__ = "massive.munit.async.IAsyncDelegateObserver";
massive_munit_async_IAsyncDelegateObserver.__isInterface__ = true;
massive_munit_async_IAsyncDelegateObserver.prototype = {
	asyncResponseHandler: null
	,asyncTimeoutHandler: null
	,asyncDelegateCreatedHandler: null
	,__class__: massive_munit_async_IAsyncDelegateObserver
};
var massive_munit_TestRunner = function(resultClient) {
	this.clients = [];
	this.running = false;
	this.addResultClient(resultClient);
	this.set_asyncFactory(new massive_munit_async_AsyncFactory(this));
	this.isDebug = false;
};
massive_munit_TestRunner.__name__ = "massive.munit.TestRunner";
massive_munit_TestRunner.__interfaces__ = [massive_munit_async_IAsyncDelegateObserver];
massive_munit_TestRunner.tryCallMethod = function(o,func,args) {
	if(func == massive_munit_TestClassHelper.nullFunc) {
		return null;
	}
	return func.apply(o,args);
};
massive_munit_TestRunner.prototype = {
	completionHandler: null
	,clientCount: null
	,get_clientCount: function() {
		return this.clients.length;
	}
	,running: null
	,testCount: null
	,failCount: null
	,errorCount: null
	,passCount: null
	,ignoreCount: null
	,clientCompleteCount: null
	,clients: null
	,activeHelper: null
	,testSuites: null
	,asyncPending: null
	,asyncDelegate: null
	,suiteIndex: null
	,asyncFactory: null
	,set_asyncFactory: function(value) {
		if(value == this.asyncFactory) {
			return value;
		}
		if(this.running) {
			throw haxe_Exception.thrown(new massive_munit_MUnitException("Can't change AsyncFactory while tests are running",{ fileName : "massive/munit/TestRunner.hx", lineNumber : 120, className : "massive.munit.TestRunner", methodName : "set_asyncFactory"}));
		}
		value.observer = this;
		return this.asyncFactory = value;
	}
	,startTime: null
	,testStartTime: null
	,isDebug: null
	,addResultClient: function(resultClient) {
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) {
			var client = _g1[_g];
			++_g;
			if(client == resultClient) {
				return;
			}
		}
		resultClient.set_completionHandler($bind(this,this.clientCompletionHandler));
		this.clients.push(resultClient);
	}
	,debug: function(testSuiteClasses) {
		this.isDebug = true;
		this.run(testSuiteClasses);
	}
	,run: function(testSuiteClasses) {
		if(this.running) {
			return;
		}
		this.running = true;
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.testCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.passCount = 0;
		this.ignoreCount = 0;
		this.suiteIndex = 0;
		this.clientCompleteCount = 0;
		massive_munit_Assert.assertionCount = 0;
		var _g = [];
		var _g1 = 0;
		while(_g1 < testSuiteClasses.length) {
			var suiteType = testSuiteClasses[_g1];
			++_g1;
			_g.push(Type.createInstance(suiteType,massive_munit_TestRunner.emptyParams));
		}
		this.testSuites = _g;
		this.startTime = massive_munit_util_Timer.stamp();
		this.execute();
	}
	,execute: function() {
		var _g = this.suiteIndex;
		var _g1 = this.testSuites.length;
		while(_g < _g1) {
			var i = _g++;
			var suite = this.testSuites[i];
			var testClass = suite;
			while(testClass.hasNext()) {
				var testClass1 = testClass.next();
				if(this.activeHelper == null || this.activeHelper.type != testClass1) {
					this.activeHelper = new massive_munit_TestClassHelper(testClass1,this.isDebug);
					var func = this.activeHelper.beforeClass;
					if(func != massive_munit_TestClassHelper.nullFunc) {
						func.apply(this.activeHelper.test,massive_munit_TestRunner.emptyParams);
					}
				}
				this.executeTestCases();
				if(!this.asyncPending) {
					var func1 = this.activeHelper.afterClass;
					if(func1 != massive_munit_TestClassHelper.nullFunc) {
						func1.apply(this.activeHelper.test,massive_munit_TestRunner.emptyParams);
					}
				} else {
					suite.repeat();
					this.suiteIndex = i;
					return;
				}
			}
			this.testSuites[i] = null;
		}
		if(!this.asyncPending) {
			var time = massive_munit_util_Timer.stamp() - this.startTime;
			var _g = 0;
			var _g1 = this.clients;
			while(_g < _g1.length) {
				var client = _g1[_g];
				++_g;
				if(js_Boot.__implements(client,massive_munit_IAdvancedTestResultClient)) {
					var cl = client;
					cl.setCurrentTestClass(null);
				}
				client.reportFinalStatistics(this.testCount,this.passCount,this.failCount,this.errorCount,this.ignoreCount,time);
			}
		}
	}
	,executeTestCases: function() {
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js_Boot.__implements(c,massive_munit_IAdvancedTestResultClient) && this.activeHelper.hasNext()) {
				var cl = c;
				cl.setCurrentTestClass(this.activeHelper.className);
			}
		}
		var testCaseData = this.activeHelper;
		while(testCaseData.hasNext()) {
			var testCaseData1 = testCaseData.next();
			if(testCaseData1.result.ignore) {
				this.ignoreCount++;
				var _g = 0;
				var _g1 = this.clients;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.addIgnore(testCaseData1.result);
				}
			} else {
				this.testCount++;
				var func = this.activeHelper.before;
				if(func != massive_munit_TestClassHelper.nullFunc) {
					func.apply(this.activeHelper.test,massive_munit_TestRunner.emptyParams);
				}
				this.testStartTime = massive_munit_util_Timer.stamp();
				this.executeTestCase(testCaseData1,testCaseData1.result.async);
				if(!this.asyncPending) {
					var func1 = this.activeHelper.after;
					if(func1 != massive_munit_TestClassHelper.nullFunc) {
						func1.apply(this.activeHelper.test,massive_munit_TestRunner.emptyParams);
					}
				} else {
					break;
				}
			}
		}
	}
	,executeTestCase: function(testCaseData,async) {
		var result = testCaseData.result;
		try {
			var assertionCount = massive_munit_Assert.assertionCount;
			if(async) {
				testCaseData.test.apply(testCaseData.scope,[this.asyncFactory]);
				if(this.asyncDelegate == null) {
					throw haxe_Exception.thrown(new massive_munit_async_MissingAsyncDelegateException("No AsyncDelegate was created in async test at " + result.get_location(),null));
				}
				this.asyncPending = true;
			} else {
				testCaseData.test.apply(testCaseData.scope,massive_munit_TestRunner.emptyParams);
				result.passed = true;
				result.executionTime = massive_munit_util_Timer.stamp() - this.testStartTime;
				this.passCount++;
				var _g = 0;
				var _g1 = this.clients;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.addPass(result);
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(async && this.asyncDelegate != null) {
				this.asyncDelegate.cancelTest();
				this.asyncDelegate = null;
			}
			if(((e) instanceof org_hamcrest_AssertionException)) {
				e = new massive_munit_AssertionException(e.message,e.info);
			}
			if(((e) instanceof massive_munit_AssertionException)) {
				result.executionTime = massive_munit_util_Timer.stamp() - this.testStartTime;
				result.failure = e;
				this.failCount++;
				var _g1 = 0;
				var _g2 = this.clients;
				while(_g1 < _g2.length) {
					var c = _g2[_g1];
					++_g1;
					c.addFail(result);
				}
			} else {
				result.executionTime = massive_munit_util_Timer.stamp() - this.testStartTime;
				if(!((e) instanceof massive_munit_MUnitException)) {
					e = new massive_munit_UnhandledException(e,result.get_location());
				}
				result.error = e;
				this.errorCount++;
				var _g1 = 0;
				var _g2 = this.clients;
				while(_g1 < _g2.length) {
					var c = _g2[_g1];
					++_g1;
					c.addError(result);
				}
			}
		}
	}
	,clientCompletionHandler: function(resultClient) {
		if(++this.clientCompleteCount == this.clients.length) {
			if(this.completionHandler != null) {
				var _g = this.completionHandler;
				var a1 = this.passCount == this.testCount;
				massive_munit_util_Timer.delay(function() {
					_g(a1);
				},10);
			}
			this.running = false;
		}
	}
	,asyncResponseHandler: function(delegate) {
		var testCaseData = this.activeHelper.current();
		testCaseData.scope = delegate;
		testCaseData.test = $bind(delegate,delegate.runTest);
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.executeTestCase(testCaseData,false);
		var func = this.activeHelper.after;
		if(func != massive_munit_TestClassHelper.nullFunc) {
			func.apply(this.activeHelper.test,massive_munit_TestRunner.emptyParams);
		}
		this.execute();
	}
	,asyncTimeoutHandler: function(delegate) {
		var testCaseData = this.activeHelper.current();
		var result = testCaseData.result;
		result.executionTime = massive_munit_util_Timer.stamp() - this.testStartTime;
		result.error = new massive_munit_async_AsyncTimeoutException("",delegate.info);
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.errorCount++;
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.addError(result);
		}
		var func = this.activeHelper.after;
		if(func != massive_munit_TestClassHelper.nullFunc) {
			func.apply(this.activeHelper.test,massive_munit_TestRunner.emptyParams);
		}
		this.execute();
	}
	,asyncDelegateCreatedHandler: function(delegate) {
		this.asyncDelegate = delegate;
	}
	,createAsyncFactory: function() {
		return new massive_munit_async_AsyncFactory(this);
	}
	,__class__: massive_munit_TestRunner
};
var massive_munit_UnhandledException = function(source,testLocation) {
	massive_munit_MUnitException.call(this,Std.string(source) + this.formatLocation(source,testLocation),null);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/UnhandledException.hx", lineNumber : 50, className : "massive.munit.UnhandledException", methodName : "new"}).className;
};
massive_munit_UnhandledException.__name__ = "massive.munit.UnhandledException";
massive_munit_UnhandledException.__super__ = massive_munit_MUnitException;
massive_munit_UnhandledException.prototype = $extend(massive_munit_MUnitException.prototype,{
	formatLocation: function(source,testLocation) {
		var stackTrace = " at " + testLocation;
		var stack = this.getStackTrace(source);
		if(stack != null && stack.length > 1) {
			stackTrace += " " + HxOverrides.substr(stack,1,null);
		}
		return stackTrace;
	}
	,getStackTrace: function(source) {
		var s = "";
		if(s == "") {
			var stack = haxe_CallStack.exceptionStack();
			while(stack.length > 0) {
				var _g = stack.shift();
				if(_g != null) {
					switch(_g._hx_index) {
					case 2:
						var _g1 = _g.s;
						var _g2 = _g.column;
						var file = _g.file;
						var line = _g.line;
						s += "\tat " + file + " (" + line + ")\n";
						break;
					case 3:
						var classname = _g.classname;
						var method = _g.method;
						s += "\tat " + classname + "#" + method + "\n";
						break;
					default:
					}
				}
			}
		}
		return s;
	}
	,__class__: massive_munit_UnhandledException
});
var massive_munit_async_AsyncDelegate = function(testCase,handler,timeout,info) {
	this.params = [];
	this.canceled = false;
	this.timedOut = false;
	this.testCase = testCase;
	this.handler = handler;
	this.delegateHandler = Reflect.makeVarArgs($bind(this,this.responseHandler));
	this.info = info;
	if(timeout == null || timeout <= 0) {
		timeout = 400;
	}
	this.timeoutDelay = timeout;
	this.timer = massive_munit_util_Timer.delay($bind(this,this.timeoutHandler),this.timeoutDelay);
};
massive_munit_async_AsyncDelegate.__name__ = "massive.munit.async.AsyncDelegate";
massive_munit_async_AsyncDelegate.prototype = {
	observer: null
	,info: null
	,delegateHandler: null
	,timeoutDelay: null
	,timedOut: null
	,canceled: null
	,testCase: null
	,handler: null
	,timer: null
	,deferredTimer: null
	,params: null
	,runTest: function() {
		this.handler.apply(this.testCase,this.params);
	}
	,cancelTest: function() {
		this.canceled = true;
		this.timer.stop();
		if(this.deferredTimer != null) {
			this.deferredTimer.stop();
		}
	}
	,responseHandler: function(params) {
		if(this.timedOut || this.canceled) {
			return null;
		}
		this.timer.stop();
		if(this.deferredTimer != null) {
			this.deferredTimer.stop();
		}
		this.params = params != null ? params.slice() : [];
		if(this.observer != null) {
			massive_munit_util_Timer.delay($bind(this,this.delayActualResponseHandler),1);
		}
		return null;
	}
	,delayActualResponseHandler: function() {
		this.observer.asyncResponseHandler(this);
		this.observer = null;
	}
	,timeoutHandler: function() {
		this.actualTimeoutHandler();
	}
	,actualTimeoutHandler: function() {
		this.deferredTimer = null;
		this.handler = null;
		this.delegateHandler = null;
		this.timedOut = true;
		if(this.observer != null) {
			this.observer.asyncTimeoutHandler(this);
			this.observer = null;
		}
	}
	,__class__: massive_munit_async_AsyncDelegate
};
var massive_munit_async_AsyncFactory = function(observer) {
	this.observer = observer;
	this.asyncDelegateCount = 0;
};
massive_munit_async_AsyncFactory.__name__ = "massive.munit.async.AsyncFactory";
massive_munit_async_AsyncFactory.prototype = {
	observer: null
	,asyncDelegateCount: null
	,createHandler: function(testCase,handler,timeout,info) {
		var delegate = new massive_munit_async_AsyncDelegate(testCase,handler,timeout,info);
		delegate.observer = this.observer;
		this.asyncDelegateCount++;
		this.observer.asyncDelegateCreatedHandler(delegate);
		return delegate.delegateHandler;
	}
	,__class__: massive_munit_async_AsyncFactory
};
var massive_munit_async_AsyncTimeoutException = function(message,info) {
	massive_munit_MUnitException.call(this,message,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/async/AsyncTimeoutException.hx", lineNumber : 49, className : "massive.munit.async.AsyncTimeoutException", methodName : "new"}).className;
};
massive_munit_async_AsyncTimeoutException.__name__ = "massive.munit.async.AsyncTimeoutException";
massive_munit_async_AsyncTimeoutException.__super__ = massive_munit_MUnitException;
massive_munit_async_AsyncTimeoutException.prototype = $extend(massive_munit_MUnitException.prototype,{
	__class__: massive_munit_async_AsyncTimeoutException
});
var massive_munit_async_MissingAsyncDelegateException = function(message,info) {
	massive_munit_MUnitException.call(this,message,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/async/MissingAsyncDelegateException.hx", lineNumber : 49, className : "massive.munit.async.MissingAsyncDelegateException", methodName : "new"}).className;
};
massive_munit_async_MissingAsyncDelegateException.__name__ = "massive.munit.async.MissingAsyncDelegateException";
massive_munit_async_MissingAsyncDelegateException.__super__ = massive_munit_MUnitException;
massive_munit_async_MissingAsyncDelegateException.prototype = $extend(massive_munit_MUnitException.prototype,{
	__class__: massive_munit_async_MissingAsyncDelegateException
});
var massive_munit_client_AbstractTestResultClient = function() {
	this.init();
};
massive_munit_client_AbstractTestResultClient.__name__ = "massive.munit.client.AbstractTestResultClient";
massive_munit_client_AbstractTestResultClient.__interfaces__ = [massive_munit_ICoverageTestResultClient,massive_munit_IAdvancedTestResultClient];
massive_munit_client_AbstractTestResultClient.prototype = {
	id: null
	,completionHandler: null
	,get_completionHandler: function() {
		return this.completionHandler;
	}
	,set_completionHandler: function(value) {
		return this.completionHandler = value;
	}
	,output: null
	,get_output: function() {
		return this.output;
	}
	,passCount: null
	,failCount: null
	,errorCount: null
	,ignoreCount: null
	,currentTestClass: null
	,currentClassResults: null
	,currentCoverageResult: null
	,totalResults: null
	,totalCoveragePercent: null
	,totalCoverageReport: null
	,totalCoverageResults: null
	,originalTrace: null
	,finalResult: null
	,init: function() {
		this.currentTestClass = null;
		this.currentClassResults = [];
		massive_munit_client_AbstractTestResultClient.traces = [];
		this.passCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.ignoreCount = 0;
		this.currentCoverageResult = null;
		this.totalResults = [];
		this.totalCoveragePercent = 0;
		this.totalCoverageReport = null;
		this.totalCoverageResults = null;
	}
	,setCurrentTestClass: function(className) {
		if(this.currentTestClass == className) {
			return;
		}
		if(this.currentTestClass != null) {
			this.finalizeTestClass();
		}
		this.currentTestClass = className;
		if(this.currentTestClass != null) {
			this.initializeTestClass();
		}
	}
	,addPass: function(result) {
		this.passCount++;
		this.updateTestClass(result);
	}
	,addFail: function(result) {
		this.failCount++;
		this.updateTestClass(result);
	}
	,addError: function(result) {
		this.errorCount++;
		this.updateTestClass(result);
	}
	,addIgnore: function(result) {
		this.ignoreCount++;
		this.updateTestClass(result);
	}
	,setCurrentTestClassCoverage: function(result) {
		this.currentCoverageResult = result;
	}
	,reportFinalCoverage: function(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency) {
		if(percent == null) {
			percent = 0;
		}
		this.totalCoveragePercent = percent;
		this.totalCoverageResults = missingCoverageResults;
		this.totalCoverageReport = summary;
	}
	,reportFinalStatistics: function(testCount,passCount,failCount,errorCount,ignoreCount,time) {
		this.finalResult = passCount == testCount;
		this.printReports();
		this.printFinalStatistics(this.finalResult,testCount,passCount,failCount,errorCount,ignoreCount,time);
		this.printOverallResult(this.finalResult);
		haxe_Log.trace = this.originalTrace;
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
		return this.get_output();
	}
	,initializeTestClass: function() {
		this.currentClassResults = [];
		massive_munit_client_AbstractTestResultClient.traces = [];
		this.passCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.ignoreCount = 0;
	}
	,updateTestClass: function(result) {
		this.currentClassResults.push(result);
		this.totalResults.push(result);
	}
	,finalizeTestClass: function() {
		this.currentClassResults.sort($bind(this,this.sortTestResults));
	}
	,printReports: function() {
	}
	,printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
	}
	,printOverallResult: function(result) {
	}
	,addTrace: function(value,info) {
		massive_munit_client_AbstractTestResultClient.traces.push(info.fileName + "|" + info.lineNumber + "| " + Std.string(value));
	}
	,getTraces: function() {
		return massive_munit_client_AbstractTestResultClient.traces.slice();
	}
	,sortTestResults: function(a,b) {
		var aInt;
		switch(a.get_type()) {
		case "ERROR":
			aInt = 2;
			break;
		case "FAIL":
			aInt = 1;
			break;
		case "IGNORE":
			aInt = 0;
			break;
		case "PASS":
			aInt = -1;
			break;
		default:
			aInt = -2;
		}
		var bInt;
		switch(b.get_type()) {
		case "ERROR":
			bInt = 2;
			break;
		case "FAIL":
			bInt = 1;
			break;
		case "IGNORE":
			bInt = 0;
			break;
		case "PASS":
			bInt = -1;
			break;
		default:
			bInt = -2;
		}
		return aInt - bInt;
	}
	,__class__: massive_munit_client_AbstractTestResultClient
};
var massive_munit_client_HTTPClient = function(client,url,queueRequest) {
	if(queueRequest == null) {
		queueRequest = true;
	}
	if(url == null) {
		url = "http://localhost:2000";
	}
	this.id = "HTTPClient";
	this.client = client;
	this.url = url;
	this.queueRequest = queueRequest;
};
massive_munit_client_HTTPClient.__name__ = "massive.munit.client.HTTPClient";
massive_munit_client_HTTPClient.__interfaces__ = [massive_munit_IAdvancedTestResultClient];
massive_munit_client_HTTPClient.dispatchNextRequest = function() {
	if(massive_munit_client_HTTPClient.responsePending || massive_munit_client_HTTPClient.queue.length == 0) {
		return;
	}
	massive_munit_client_HTTPClient.responsePending = true;
	var request = massive_munit_client_HTTPClient.queue.pop();
	request.send();
};
massive_munit_client_HTTPClient.prototype = {
	id: null
	,completionHandler: null
	,get_completionHandler: function() {
		return this.completionHandler;
	}
	,set_completionHandler: function(value) {
		return this.completionHandler = value;
	}
	,client: null
	,url: null
	,request: null
	,queueRequest: null
	,setCurrentTestClass: function(className) {
		if(js_Boot.__implements(this.client,massive_munit_IAdvancedTestResultClient)) {
			(js_Boot.__cast(this.client , massive_munit_IAdvancedTestResultClient)).setCurrentTestClass(className);
		}
	}
	,addPass: function(result) {
		this.client.addPass(result);
	}
	,addFail: function(result) {
		this.client.addFail(result);
	}
	,addError: function(result) {
		this.client.addError(result);
	}
	,addIgnore: function(result) {
		this.client.addIgnore(result);
	}
	,reportFinalStatistics: function(testCount,passCount,failCount,errorCount,ignoreCount,time) {
		var result = this.client.reportFinalStatistics(testCount,passCount,failCount,errorCount,ignoreCount,time);
		this.sendResult(result);
		return result;
	}
	,sendResult: function(result) {
		this.request = new massive_munit_client_URLRequest(this.url);
		this.request.setHeader("munit-clientId",this.client.id);
		this.request.setHeader("munit-platformId",this.platform());
		this.request.onData = $bind(this,this.onData);
		this.request.onError = $bind(this,this.onError);
		this.request.data = result;
		if(this.queueRequest) {
			massive_munit_client_HTTPClient.queue.unshift(this.request);
			massive_munit_client_HTTPClient.dispatchNextRequest();
		} else {
			this.request.send();
		}
	}
	,platform: function() {
		return "js";
	}
	,onData: function(data) {
		if(this.queueRequest) {
			massive_munit_client_HTTPClient.responsePending = false;
			massive_munit_client_HTTPClient.dispatchNextRequest();
		}
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
	}
	,onError: function(msg) {
		if(this.queueRequest) {
			massive_munit_client_HTTPClient.responsePending = false;
			massive_munit_client_HTTPClient.dispatchNextRequest();
		}
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
	}
	,__class__: massive_munit_client_HTTPClient
};
var massive_munit_client_URLRequest = function(url) {
	this.url = url;
	this.createClient(url);
	this.setHeader("Content-Type","text/plain");
};
massive_munit_client_URLRequest.__name__ = "massive.munit.client.URLRequest";
massive_munit_client_URLRequest.prototype = {
	onData: null
	,onError: null
	,data: null
	,url: null
	,headers: null
	,client: null
	,createClient: function(url) {
		this.client = new haxe_http_HttpJs(url);
	}
	,setHeader: function(name,value) {
		this.client.setHeader(name,value);
	}
	,send: function() {
		var body = Std.string(this.data);
		this.client.onData = this.onData;
		this.client.onError = this.onError;
		this.client.setPostData(body);
		this.client.request(true);
	}
	,__class__: massive_munit_client_URLRequest
};
var massive_munit_client_JUnitReportClient = function() {
	this.id = "junit";
	this.currentTestClass = "";
	this.newline = "\n";
	this.testSuiteXML = null;
	this.xml = new StringBuf();
	this.xml.b += Std.string("<testsuites>" + this.newline);
};
massive_munit_client_JUnitReportClient.__name__ = "massive.munit.client.JUnitReportClient";
massive_munit_client_JUnitReportClient.__interfaces__ = [massive_munit_IAdvancedTestResultClient];
massive_munit_client_JUnitReportClient.prototype = {
	id: null
	,completionHandler: null
	,get_completionHandler: function() {
		return this.completionHandler;
	}
	,set_completionHandler: function(value) {
		return this.completionHandler = value;
	}
	,newline: null
	,xml: null
	,testSuiteXML: null
	,currentTestClass: null
	,suitePassCount: null
	,suiteFailCount: null
	,suiteErrorCount: null
	,suiteExecutionTime: null
	,setCurrentTestClass: function(className) {
		if(this.currentTestClass == className) {
			return;
		}
		if(this.currentTestClass != null) {
			this.endTestSuite();
		}
		this.currentTestClass = className;
		if(this.currentTestClass != null) {
			this.startTestSuite();
		}
	}
	,addPass: function(result) {
		this.suitePassCount++;
		var _this = this.testSuiteXML;
		var x = "<testcase classname=\"" + result.className + "\" name=\"" + result.name + "\" time=\"" + massive_munit_util_MathUtil.round(result.executionTime,5) + "\"/>";
		_this.b += Std.string(x);
		this.testSuiteXML.b += Std.string(this.newline);
	}
	,addFail: function(result) {
		this.suiteFailCount++;
		var _this = this.testSuiteXML;
		var x = "<testcase classname=\"" + result.className + "\" name=\"" + result.name + "\" time=\"" + massive_munit_util_MathUtil.round(result.executionTime,5) + "\">";
		_this.b += Std.string(x);
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += Std.string("<failure message=\"" + result.failure.message + "\" type=\"" + result.failure.type + "\">" + Std.string(result.failure) + "</failure>");
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += "</testcase>";
		this.testSuiteXML.b += Std.string(this.newline);
	}
	,addError: function(result) {
		this.suiteErrorCount++;
		var _this = this.testSuiteXML;
		var x = "<testcase classname=\"" + result.className + "\" name=\"" + result.name + "\" time=\"" + massive_munit_util_MathUtil.round(result.executionTime,5) + "\">";
		_this.b += Std.string(x);
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += Std.string("<error message=\"" + Std.string(result.error.message) + "\" type=\"" + Std.string(result.error.type) + "\">" + Std.string(result.error) + "</error>");
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += "</testcase>";
		this.testSuiteXML.b += Std.string(this.newline);
	}
	,addIgnore: function(result) {
	}
	,reportFinalStatistics: function(testCount,passCount,failCount,errorCount,ignoreCount,time) {
		this.xml.b += "</testsuites>";
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
		return this.xml.b;
	}
	,startTestSuite: function() {
		this.suitePassCount = 0;
		this.suiteFailCount = 0;
		this.suiteErrorCount = 0;
		this.suiteExecutionTime = massive_munit_util_Timer.stamp();
		this.testSuiteXML = new StringBuf();
	}
	,endTestSuite: function() {
		if(this.testSuiteXML == null) {
			return;
		}
		var suiteTestCount = this.suitePassCount + this.suiteFailCount + this.suiteErrorCount;
		this.suiteExecutionTime = massive_munit_util_Timer.stamp() - this.suiteExecutionTime;
		var time = massive_munit_util_MathUtil.round(this.suiteExecutionTime,5);
		var _this = this.xml;
		var x = "<testsuite errors=\"" + this.suiteErrorCount + "\" failures=\"" + this.suiteFailCount + "\" hostname=\"\" name=\"" + this.currentTestClass + "\" tests=\"" + suiteTestCount + "\" time=\"" + time + "\" timestamp=\"" + Std.string(new Date()) + "\">";
		_this.b += Std.string(x);
		this.xml.b += Std.string(this.newline);
		this.testSuiteXML.b += "<system-out></system-out>";
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += "<system-err></system-err>";
		this.testSuiteXML.b += Std.string(this.newline);
		this.xml.b += Std.string(this.testSuiteXML.b);
		this.xml.b += "</testsuite>";
		this.xml.b += Std.string(this.newline);
	}
	,__class__: massive_munit_client_JUnitReportClient
};
var massive_munit_client_PrintClientBase = function(includeIgnoredReport) {
	if(includeIgnoredReport == null) {
		includeIgnoredReport = true;
	}
	this.divider2 = "==============================";
	this.divider1 = "------------------------------";
	massive_munit_client_AbstractTestResultClient.call(this);
	this.id = "simple";
	this.verbose = false;
	this.includeIgnoredReport = includeIgnoredReport;
	this.printLine("MUnit Results");
	this.printLine(this.divider1);
};
massive_munit_client_PrintClientBase.__name__ = "massive.munit.client.PrintClientBase";
massive_munit_client_PrintClientBase.__super__ = massive_munit_client_AbstractTestResultClient;
massive_munit_client_PrintClientBase.prototype = $extend(massive_munit_client_AbstractTestResultClient.prototype,{
	divider1: null
	,divider2: null
	,verbose: null
	,includeIgnoredReport: null
	,initializeTestClass: function() {
		massive_munit_client_AbstractTestResultClient.prototype.initializeTestClass.call(this);
		this.printLine("Class: " + this.currentTestClass + " ");
	}
	,updateTestClass: function(result) {
		massive_munit_client_AbstractTestResultClient.prototype.updateTestClass.call(this,result);
		if(this.verbose) {
			this.printLine(" " + result.name + ": " + result.get_type() + " ");
		} else {
			switch(result.get_type()) {
			case "ERROR":
				this.print("x");
				break;
			case "FAIL":
				this.print("!");
				break;
			case "IGNORE":
				this.print(",");
				break;
			case "PASS":
				this.print(".");
				break;
			case "UNKNOWN":
				break;
			}
		}
	}
	,finalizeTestClass: function() {
		massive_munit_client_AbstractTestResultClient.prototype.finalizeTestClass.call(this);
		var _g = 0;
		var _g1 = this.getTraces();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.printLine("TRACE: " + item,1);
		}
		var _g = 0;
		var _g1 = this.currentClassResults;
		while(_g < _g1.length) {
			var result = _g1[_g];
			++_g;
			switch(result.get_type()) {
			case "ERROR":
				this.printLine("ERROR: " + Std.string(result.error),1);
				break;
			case "FAIL":
				this.printLine("FAIL: " + Std.string(result.failure),1);
				break;
			case "IGNORE":
				var ingoredString = result.get_location();
				if(result.description != null) {
					ingoredString += " - " + result.description;
				}
				this.printLine("IGNORE: " + ingoredString,1);
				break;
			case "PASS":case "UNKNOWN":
				break;
			}
		}
	}
	,setCurrentTestClassCoverage: function(result) {
		massive_munit_client_AbstractTestResultClient.prototype.setCurrentTestClassCoverage.call(this,result);
		this.print(" [" + result.percent + "%]");
	}
	,reportFinalCoverage: function(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency) {
		if(percent == null) {
			percent = 0;
		}
		massive_munit_client_AbstractTestResultClient.prototype.reportFinalCoverage.call(this,percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency);
		this.printLine("");
		this.printLine(this.divider1);
		this.printLine("COVERAGE REPORT");
		this.printLine(this.divider1);
		if(missingCoverageResults != null && missingCoverageResults.length > 0) {
			this.printLine("MISSING CODE BLOCKS:");
			var _g = 0;
			while(_g < missingCoverageResults.length) {
				var result = missingCoverageResults[_g];
				++_g;
				this.printLine(result.className + " [" + result.percent + "%]",1);
				var _g1 = 0;
				var _g2 = result.blocks;
				while(_g1 < _g2.length) {
					var item = _g2[_g1];
					++_g1;
					this.printIndentedLines(item,2);
				}
				this.printLine("");
			}
		}
		if(executionFrequency != null) {
			this.printLine("CODE EXECUTION FREQUENCY:");
			this.printIndentedLines(executionFrequency,1);
			this.printLine("");
		}
		if(classBreakdown != null) {
			this.printIndentedLines(classBreakdown,0);
		}
		if(packageBreakdown != null) {
			this.printIndentedLines(packageBreakdown,0);
		}
		if(summary != null) {
			this.printIndentedLines(summary,0);
		}
	}
	,printIndentedLines: function(value,indent) {
		if(indent == null) {
			indent = 1;
		}
		var lines = value.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			this.printLine(line,indent);
		}
	}
	,printReports: function() {
		this.printFinalIgnoredStatistics(this.ignoreCount);
	}
	,printFinalIgnoredStatistics: function(count) {
		if(!this.includeIgnoredReport || count == 0) {
			return;
		}
		var items = Lambda.filter(this.totalResults,$bind(this,this.filterIngored));
		if(items.length == 0) {
			return;
		}
		this.printLine("");
		this.printLine("Ignored (" + count + "):");
		this.printLine(this.divider1);
		var _g = 0;
		while(_g < items.length) {
			var result = items[_g];
			++_g;
			var ingoredString = result.get_location();
			if(result.description != null) {
				ingoredString += " - " + result.description;
			}
			this.printLine("IGNORE: " + ingoredString,1);
		}
		this.printLine("");
	}
	,filterIngored: function(result) {
		return result.get_type() == "IGNORE";
	}
	,printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
		this.printLine(this.divider2);
		var sb_b = "";
		sb_b += result ? "PASSED" : "FAILED";
		sb_b += "\nTests: ";
		sb_b += testCount == null ? "null" : "" + testCount;
		sb_b += "  Passed: ";
		sb_b += passCount == null ? "null" : "" + passCount;
		sb_b += "  Failed: ";
		sb_b += failCount == null ? "null" : "" + failCount;
		sb_b += " Errors: ";
		sb_b += errorCount == null ? "null" : "" + errorCount;
		sb_b += " Ignored: ";
		sb_b += ignoreCount == null ? "null" : "" + ignoreCount;
		sb_b += " Time: ";
		sb_b += Std.string(massive_munit_util_MathUtil.round(time,5));
		this.printLine(sb_b);
		this.printLine("");
	}
	,printOverallResult: function(result) {
		this.printLine("");
	}
	,print: function(value) {
		this.output = this.get_output() + Std.string(value);
	}
	,printLine: function(value,indent) {
		if(indent == null) {
			indent = 0;
		}
		value = Std.string(value);
		value = this.indentString(value,indent);
		this.print("\n" + Std.string(value));
	}
	,indentString: function(value,indent) {
		if(indent == null) {
			indent = 0;
		}
		if(indent > 0) {
			value = StringTools.lpad(""," ",indent * 4) + value;
		}
		return value;
	}
	,__class__: massive_munit_client_PrintClientBase
});
var massive_munit_client_PrintClient = function(includeIgnoredReport) {
	if(includeIgnoredReport == null) {
		includeIgnoredReport = true;
	}
	massive_munit_client_PrintClientBase.call(this,includeIgnoredReport);
	this.id = "print";
};
massive_munit_client_PrintClient.__name__ = "massive.munit.client.PrintClient";
massive_munit_client_PrintClient.__super__ = massive_munit_client_PrintClientBase;
massive_munit_client_PrintClient.prototype = $extend(massive_munit_client_PrintClientBase.prototype,{
	external: null
	,textArea: null
	,init: function() {
		massive_munit_client_PrintClientBase.prototype.init.call(this);
		this.external = new massive_munit_client_ExternalPrintClientJS();
		this.initJS();
		this.originalTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this.customTrace);
	}
	,initJS: function() {
		var div = window.document.getElementById("haxe:trace");
		if(div == null) {
			var positionInfo = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/client/PrintClient.hx", lineNumber : 119, className : "massive.munit.client.PrintClient", methodName : "initJS"});
			var error = "MissingElementException: 'haxe:trace' element not found at " + positionInfo.className + "#" + positionInfo.methodName + "(" + positionInfo.lineNumber + ")";
			window.alert(Std.string(error));
		}
	}
	,printOverallResult: function(result) {
		massive_munit_client_PrintClientBase.prototype.printOverallResult.call(this,result);
		this.external.setResult(result);
		this.external.setResultBackground(result);
	}
	,customTrace: function(value,info) {
		if(info != null && info.customParams != null) {
			value = "" + value + ", " + info.customParams.join(", ");
		}
		this.addTrace(value,info);
	}
	,print: function(value) {
		massive_munit_client_PrintClientBase.prototype.print.call(this,value);
		this.external.print(value);
	}
	,__class__: massive_munit_client_PrintClient
});
var massive_munit_client_ExternalPrintClient = function() { };
massive_munit_client_ExternalPrintClient.__name__ = "massive.munit.client.ExternalPrintClient";
massive_munit_client_ExternalPrintClient.__isInterface__ = true;
massive_munit_client_ExternalPrintClient.prototype = {
	queue: null
	,setResult: null
	,print: null
	,printLine: null
	,setResultBackground: null
	,createTestClass: null
	,printToTestClassSummary: null
	,setTestClassResult: null
	,trace: null
	,addTestPass: null
	,addTestFail: null
	,addTestError: null
	,addTestIgnore: null
	,addTestClassCoverage: null
	,addTestClassCoverageItem: null
	,createCoverageReport: null
	,addMissingCoverageClass: null
	,addCoverageReportSection: null
	,addCoverageSummary: null
	,printSummary: null
	,__class__: massive_munit_client_ExternalPrintClient
};
var massive_munit_client_ExternalPrintClientJS = function() {
	var div = window.document.getElementById("haxe:trace");
	if(div == null) {
		var positionInfo = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/client/PrintClientBase.hx", lineNumber : 275, className : "massive.munit.client.ExternalPrintClientJS", methodName : "new"});
		var error = "MissingElementException: 'haxe:trace' element not found at " + positionInfo.className + "#" + positionInfo.methodName + "(" + positionInfo.lineNumber + ")";
		window.alert(Std.string(error));
	}
};
massive_munit_client_ExternalPrintClientJS.__name__ = "massive.munit.client.ExternalPrintClientJS";
massive_munit_client_ExternalPrintClientJS.__interfaces__ = [massive_munit_client_ExternalPrintClient];
massive_munit_client_ExternalPrintClientJS.prototype = {
	print: function(value) {
		this.queue("munitPrint",value);
	}
	,printLine: function(value) {
		this.queue("munitPrintLine",value);
	}
	,setResult: function(value) {
		this.queue("setResult",value);
	}
	,setResultBackground: function(value) {
		this.queue("setResultBackground",value);
	}
	,trace: function(value) {
		this.queue("munitTrace",value);
	}
	,createTestClass: function(className) {
		this.queue("createTestClass",className);
	}
	,printToTestClassSummary: function(value) {
		this.queue("updateTestSummary",value);
	}
	,setTestClassResult: function(resultType) {
		this.queue("setTestClassResult",resultType);
	}
	,addTestPass: function(value) {
		if(value == null) {
			return;
		}
		this.queue("addTestPass",value);
	}
	,addTestFail: function(value) {
		this.queue("addTestFail",value);
	}
	,addTestError: function(value) {
		this.queue("addTestError",value);
	}
	,addTestIgnore: function(value) {
		this.queue("addTestIgnore",value);
	}
	,addTestClassCoverage: function(className,percent) {
		if(percent == null) {
			percent = 0;
		}
		this.queue("addTestCoverageClass",[className,percent]);
	}
	,addTestClassCoverageItem: function(value) {
		this.queue("addTestCoverageItem",value);
	}
	,createCoverageReport: function(percent) {
		if(percent == null) {
			percent = 0;
		}
		this.queue("createCoverageReport",percent);
	}
	,addMissingCoverageClass: function(className,percent) {
		if(percent == null) {
			percent = 0;
		}
		this.queue("addMissingCoverageClass",[className,percent]);
	}
	,addCoverageReportSection: function(name,value) {
		this.queue("addCoverageReportSection",[name,value]);
	}
	,addCoverageSummary: function(value) {
		this.queue("addCoverageSummary",value);
	}
	,printSummary: function(value) {
		this.queue("printSummary",value);
	}
	,queue: function(method,args) {
		var a = [];
		if(((args) instanceof Array)) {
			a = a.concat(js_Boot.__cast(args , Array));
		} else {
			a.push(args);
		}
		var jsCode = this.convertToJavaScript(method,a);
		return eval(jsCode);
	}
	,convertToJavaScript: function(method,args) {
		var htmlArgs;
		if(args != null && args.length > 0) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var arg = args[_g1];
				++_g1;
				_g.push(this.serialiseToHTML(Std.string(arg)));
			}
			htmlArgs = _g;
		} else {
			htmlArgs = null;
		}
		if(htmlArgs == null) {
			return "addToQueue(\"" + method + "\")";
		}
		var result = "addToQueue(\"" + method + "\"";
		var _g = 0;
		while(_g < htmlArgs.length) {
			var arg = htmlArgs[_g];
			++_g;
			result += ",\"" + arg + "\"";
		}
		result += ")";
		return result;
	}
	,serialiseToHTML: function(value) {
		value = js_Boot.__string_rec(value,"");
		var result = StringTools.htmlEscape(value);
		result = result.split("\n").join("<br/>");
		result = result.split(" ").join("&nbsp;");
		result = result.split("\"").join("\\'");
		return result;
	}
	,__class__: massive_munit_client_ExternalPrintClientJS
};
var massive_munit_client_RichPrintClient = function() {
	massive_munit_client_PrintClientBase.call(this);
	this.id = "RichPrintClient";
};
massive_munit_client_RichPrintClient.__name__ = "massive.munit.client.RichPrintClient";
massive_munit_client_RichPrintClient.__super__ = massive_munit_client_PrintClientBase;
massive_munit_client_RichPrintClient.prototype = $extend(massive_munit_client_PrintClientBase.prototype,{
	testClassResultType: null
	,external: null
	,init: function() {
		massive_munit_client_PrintClientBase.prototype.init.call(this);
		this.originalTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this.customTrace);
		this.external = new massive_munit_client_ExternalPrintClientJS();
	}
	,initializeTestClass: function() {
		massive_munit_client_PrintClientBase.prototype.initializeTestClass.call(this);
		this.external.createTestClass(this.currentTestClass);
		this.external.printToTestClassSummary("Class: " + this.currentTestClass + " ");
	}
	,updateTestClass: function(result) {
		massive_munit_client_PrintClientBase.prototype.updateTestClass.call(this,result);
		var value = this.serializeTestResult(result);
		switch(result.get_type()) {
		case "ERROR":
			this.external.printToTestClassSummary("x");
			this.external.addTestError(value);
			break;
		case "FAIL":
			this.external.printToTestClassSummary("!");
			this.external.addTestFail(value);
			break;
		case "IGNORE":
			this.external.printToTestClassSummary(",");
			this.external.addTestIgnore(value);
			break;
		case "PASS":
			this.external.printToTestClassSummary(".");
			this.external.addTestPass(value);
			break;
		case "UNKNOWN":
			break;
		}
	}
	,serializeTestResult: function(result) {
		var summary = result.name;
		if(result.description != null && result.description != "") {
			summary += " - " + result.description + " -";
		}
		summary += " (" + massive_munit_util_MathUtil.round(result.executionTime,4) + "s)";
		if(result.error != null) {
			return "Error: " + summary + "\n" + Std.string(result.error);
		}
		if(result.failure != null) {
			return "Failure: " + summary + "\n" + Std.string(result.failure);
		}
		if(result.ignore) {
			return "Ignore: " + summary;
		}
		return null;
	}
	,finalizeTestClass: function() {
		massive_munit_client_PrintClientBase.prototype.finalizeTestClass.call(this);
		this.testClassResultType = this.getTestClassResultType();
		var code;
		switch(this.testClassResultType) {
		case "ERROR":
			code = 2;
			break;
		case "FAIL":
			code = 1;
			break;
		case "IGNORE":
			code = 3;
			break;
		case "PASS":
			code = 0;
			break;
		default:
			code = -1;
		}
		if(code == -1) {
			return;
		}
		this.external.setTestClassResult(code);
	}
	,getTestClassResultType: function() {
		if(this.errorCount > 0) {
			return "ERROR";
		}
		if(this.failCount > 0) {
			return "FAIL";
		}
		if(this.ignoreCount > 0) {
			return "IGNORE";
		}
		return "PASS";
	}
	,setCurrentTestClassCoverage: function(result) {
		massive_munit_client_PrintClientBase.prototype.setCurrentTestClassCoverage.call(this,result);
		this.external.printToTestClassSummary(" [" + result.percent + "%]");
		if(result.percent == 100) {
			return;
		}
		this.external.addTestClassCoverage(result.className,result.percent);
		var _g = 0;
		var _g1 = result.blocks;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.external.addTestClassCoverageItem(item);
		}
	}
	,reportFinalCoverage: function(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency) {
		if(percent == null) {
			percent = 0;
		}
		massive_munit_client_PrintClientBase.prototype.reportFinalCoverage.call(this,percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency);
		this.external.createCoverageReport(percent);
		this.printMissingCoverage(missingCoverageResults);
		if(executionFrequency != null) {
			this.external.addCoverageReportSection("Code Execution Frequency",this.trim(executionFrequency));
		}
		if(classBreakdown != null) {
			this.external.addCoverageReportSection("Class Breakdown",this.trim(classBreakdown));
		}
		if(packageBreakdown != null) {
			this.external.addCoverageReportSection("Package Breakdown",this.trim(packageBreakdown));
		}
		if(packageBreakdown != null) {
			this.external.addCoverageReportSection("Summary",this.trim(summary));
		}
	}
	,trim: function(output) {
		while(output.indexOf("\n") == 0) output = HxOverrides.substr(output,1,null);
		while(output.lastIndexOf("\n") == output.length - 2) output = HxOverrides.substr(output,0,output.length - 2);
		return output;
	}
	,printMissingCoverage: function(missingCoverageResults) {
		if(missingCoverageResults == null || missingCoverageResults.length == 0) {
			return;
		}
		var _g = 0;
		while(_g < missingCoverageResults.length) {
			var result = missingCoverageResults[_g];
			++_g;
			this.external.addMissingCoverageClass(result.className,result.percent);
			var _g1 = 0;
			var _g2 = result.blocks;
			while(_g1 < _g2.length) {
				var item = _g2[_g1];
				++_g1;
				this.external.addTestClassCoverageItem(item);
			}
		}
	}
	,printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
		massive_munit_client_PrintClientBase.prototype.printFinalStatistics.call(this,result,testCount,passCount,failCount,errorCount,ignoreCount,time);
		var sb_b = "";
		sb_b += result ? "PASSED" : "FAILED";
		sb_b += "\nTests: ";
		sb_b += testCount == null ? "null" : "" + testCount;
		sb_b += "  Passed: ";
		sb_b += passCount == null ? "null" : "" + passCount;
		sb_b += "  Failed: ";
		sb_b += failCount == null ? "null" : "" + failCount;
		sb_b += " Errors: ";
		sb_b += errorCount == null ? "null" : "" + errorCount;
		sb_b += " Ignored: ";
		sb_b += ignoreCount == null ? "null" : "" + ignoreCount;
		sb_b += " Time: ";
		sb_b += Std.string(massive_munit_util_MathUtil.round(time,5));
		this.external.printSummary(sb_b);
	}
	,printOverallResult: function(result) {
		massive_munit_client_PrintClientBase.prototype.printOverallResult.call(this,result);
		this.external.setResult(result);
	}
	,customTrace: function(value,info) {
		if(info != null && info.customParams != null) {
			value = "" + value + ", " + info.customParams.join(", ");
		}
		this.addTrace(value,info);
		var traces = this.getTraces();
		var t = traces[traces.length - 1];
		this.external.trace(t);
	}
	,print: function(value) {
		massive_munit_client_PrintClientBase.prototype.print.call(this,value);
	}
	,__class__: massive_munit_client_RichPrintClient
});
var massive_munit_client_SummaryReportClient = function() {
	massive_munit_client_AbstractTestResultClient.call(this);
	this.id = "summary";
};
massive_munit_client_SummaryReportClient.__name__ = "massive.munit.client.SummaryReportClient";
massive_munit_client_SummaryReportClient.__super__ = massive_munit_client_AbstractTestResultClient;
massive_munit_client_SummaryReportClient.prototype = $extend(massive_munit_client_AbstractTestResultClient.prototype,{
	printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
		var sb_b = "";
		sb_b += Std.string("result:" + (result == null ? "null" : "" + result));
		sb_b += Std.string("\ncount:" + testCount);
		sb_b += Std.string("\npass:" + passCount);
		sb_b += Std.string("\nfail:" + failCount);
		sb_b += Std.string("\nerror:" + errorCount);
		sb_b += Std.string("\nignore:" + ignoreCount);
		sb_b += Std.string("\ntime:" + time);
		sb_b += "\n";
		var resultCount = 0;
		while(this.totalResults.length > 0 && resultCount < 10) {
			var result = this.totalResults.shift();
			if(!result.passed) {
				sb_b += Std.string("\n# " + result.get_location());
				++resultCount;
			}
		}
		var remainder = failCount + errorCount - resultCount;
		if(remainder > 0) {
			sb_b += Std.string("# ... plus " + remainder + " more");
		}
		this.output = sb_b;
	}
	,printOverallResult: function(result) {
	}
	,printReports: function() {
	}
	,__class__: massive_munit_client_SummaryReportClient
});
var massive_munit_util_MathUtil = function() { };
massive_munit_util_MathUtil.__name__ = "massive.munit.util.MathUtil";
massive_munit_util_MathUtil.round = function(value,precision) {
	value *= Math.pow(10,precision);
	return Math.round(value) / Math.pow(10,precision);
};
var massive_munit_util_Timer = $hx_exports["massive"]["munit"]["util"]["Timer"] = function(time_ms) {
	this.id = massive_munit_util_Timer.arr.length;
	massive_munit_util_Timer.arr[this.id] = this;
	this.timerId = window.setInterval("massive.munit.util.Timer.arr[" + this.id + "].run();",time_ms);
};
massive_munit_util_Timer.__name__ = "massive.munit.util.Timer";
massive_munit_util_Timer.delay = function(f,time_ms) {
	var t = new massive_munit_util_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
massive_munit_util_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
massive_munit_util_Timer.prototype = {
	id: null
	,timerId: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		window.clearInterval(this.timerId);
		massive_munit_util_Timer.arr[this.id] = null;
		if(this.id > 100 && this.id == massive_munit_util_Timer.arr.length - 1) {
			var p = this.id - 1;
			while(p >= 0 && massive_munit_util_Timer.arr[p] == null) --p;
			massive_munit_util_Timer.arr = massive_munit_util_Timer.arr.slice(0,p + 1);
		}
		this.id = null;
	}
	,run: function() {
	}
	,__class__: massive_munit_util_Timer
};
var org_hamcrest_Exception = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	var c = js_Boot.getClass(this);
	this.name = c.__name__;
	this.message = message;
	this.cause = cause;
	this.info = info;
};
org_hamcrest_Exception.__name__ = "org.hamcrest.Exception";
org_hamcrest_Exception.prototype = {
	name: null
	,get_name: function() {
		return this.name;
	}
	,message: null
	,get_message: function() {
		return this.message;
	}
	,cause: null
	,get_cause: function() {
		return this.cause;
	}
	,info: null
	,toString: function() {
		var str = this.get_name() + ": " + this.get_message();
		if(this.info != null) {
			str += " at " + this.info.className + "#" + this.info.methodName + " (" + this.info.lineNumber + ")";
		}
		if(this.get_cause() != null) {
			str += "\n\t Caused by: " + Std.string(this.get_cause());
		}
		return str;
	}
	,__class__: org_hamcrest_Exception
};
var org_hamcrest_AssertionException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_AssertionException.__name__ = "org.hamcrest.AssertionException";
org_hamcrest_AssertionException.__super__ = org_hamcrest_Exception;
org_hamcrest_AssertionException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_AssertionException
});
var org_hamcrest_IllegalArgumentException = function(message,cause,info) {
	if(message == null) {
		message = "Argument could not be processed.";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_IllegalArgumentException.__name__ = "org.hamcrest.IllegalArgumentException";
org_hamcrest_IllegalArgumentException.__super__ = org_hamcrest_Exception;
org_hamcrest_IllegalArgumentException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_IllegalArgumentException
});
var org_hamcrest_MissingImplementationException = function(message,cause,info) {
	if(message == null) {
		message = "Abstract method not overridden.";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_MissingImplementationException.__name__ = "org.hamcrest.MissingImplementationException";
org_hamcrest_MissingImplementationException.__super__ = org_hamcrest_Exception;
org_hamcrest_MissingImplementationException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_MissingImplementationException
});
var org_hamcrest_UnsupportedOperationException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_UnsupportedOperationException.__name__ = "org.hamcrest.UnsupportedOperationException";
org_hamcrest_UnsupportedOperationException.__super__ = org_hamcrest_Exception;
org_hamcrest_UnsupportedOperationException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_UnsupportedOperationException
});
var src_Infix = function() {
};
src_Infix.__name__ = "src.Infix";
src_Infix.prototype = {
	start: function(line) {
		var r = new EReg("[ ]+","g");
		var buf = r.split(line);
		var oper = "+-*/";
		return this.prefixToInfix(oper,buf);
	}
	,prefixToInfix: function(oper,buf) {
		buf.reverse();
		var stack = new haxe_ds_GenericStack();
		var str = "";
		var k;
		var x;
		var x1;
		var _g = 0;
		while(_g < buf.length) {
			var i = buf[_g];
			++_g;
			if(i == "") {
				continue;
			}
			k = oper.indexOf(i);
			var v = k;
			if(v >= 0) {
				x = stack.head == null ? null : stack.head.elt;
				var k1 = stack.head;
				if(k1 != null) {
					stack.head = k1.next;
				}
				x1 = stack.head == null ? null : stack.head.elt;
				var k2 = stack.head;
				if(k2 != null) {
					stack.head = k2.next;
				}
				switch(i) {
				case "*":case "/":
					if(x.indexOf("+") != -1 || x.indexOf("-") != -1) {
						x = "(" + x + ")";
					}
					if(x1.indexOf("+") != -1 || x1.indexOf("-") != -1) {
						x1 = "(" + x1 + ")";
					}
					str = x + i + x1;
					break;
				default:
					var v1 = i;
					if(x1 == null) {
						x = "(" + x + ")";
						str = i + x;
					} else {
						str = x + i + x1;
					}
				}
				stack.head = new haxe_ds_GenericCell(str,stack.head);
			} else {
				stack.head = new haxe_ds_GenericCell(i,stack.head);
			}
		}
		return str;
	}
	,__class__: src_Infix
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
ExampleTest.__meta__ = { fields : { beforeClass : { BeforeClass : null}, afterClass : { AfterClass : null}, setup : { Before : null}, tearDown : { After : null}, testExample : { Test : null}, testAsyncExample : { AsyncTest : null}, testExampleThatOnlyRunsWithDebugFlag : { TestDebug : null}}};
InfixTest.__meta__ = { fields : { beforeClass : { BeforeClass : null}, afterClass : { AfterClass : null}, setup : { Before : null}, tearDown : { After : null}, testPrefixToInfix0 : { Test : null}, testPrefixToInfix1 : { Test : null}, testPrefixToInfix2 : { Test : null}, testPrefixToInfix3 : { Test : null}, testPrefixToInfix4 : { Test : null}, testPrefixToInfix5 : { Test : null}, testPrefixToInfix6 : { Test : null}}};
massive_munit_Assert.assertionCount = 0;
massive_munit_TestClassHelper.META_TAG_BEFORE_CLASS = "BeforeClass";
massive_munit_TestClassHelper.META_TAG_AFTER_CLASS = "AfterClass";
massive_munit_TestClassHelper.META_TAG_BEFORE = "Before";
massive_munit_TestClassHelper.META_TAG_AFTER = "After";
massive_munit_TestClassHelper.META_TAG_TEST = "Test";
massive_munit_TestClassHelper.META_TAG_ASYNC_TEST = "AsyncTest";
massive_munit_TestClassHelper.META_TAG_IGNORE = "Ignore";
massive_munit_TestClassHelper.META_PARAM_ASYNC_TEST = "Async";
massive_munit_TestClassHelper.META_TAG_TEST_DEBUG = "TestDebug";
massive_munit_TestClassHelper.META_TAGS = ["BeforeClass","AfterClass","Before","After","Test","AsyncTest","TestDebug"];
massive_munit_TestRunner.emptyParams = [];
massive_munit_async_AsyncDelegate.DEFAULT_TIMEOUT = 400;
massive_munit_client_HTTPClient.queue = [];
massive_munit_client_HTTPClient.responsePending = false;
massive_munit_client_JUnitReportClient.DEFAULT_ID = "junit";
massive_munit_client_PrintClientBase.DEFAULT_ID = "simple";
massive_munit_client_PrintClient.DEFAULT_ID = "print";
massive_munit_client_RichPrintClient.DEFAULT_ID = "RichPrintClient";
massive_munit_client_SummaryReportClient.DEFAULT_ID = "summary";
massive_munit_util_Timer.arr = [];
TestMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
